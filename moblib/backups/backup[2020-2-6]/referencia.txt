      
	||||||    ||||||    ||||||			||||||    ||||||   |     |  ||     |    ||||||			||||||
	|    |   |      |   |     |			|     |   |     |  |     |  | |    |   |      |			|     |
	|    |  |        |  |     |			|     |   |     |  |     |  |  |   |  |        |		|      |
	|||||   |        |  | |||||			||||||    | |||||  |     |  |   |  |  |        |		|      |
	|       |        |  |  |			|     |   |  |     |     |  |    | |  |        |		|      |
	|        |      |   |   |			|     |   |   |    |	 |  |     ||   |      |			|     |
	|         ||||||    |    |			|||||||   |    |   |||||||  |      |    ||||||			||||||   |||

	manual:


		como usar a funcao de movimento:

			deve-se definir estados para as funcoes:
				set_w() - set_s() - set_a() - set_d()
				obs. sendo cada uma equivalente a um estado de tecla <[presionada] | [nao presionada]>
			e depois realizar a chamada para a funcao:
				obj_mov(usint)

		como usar as funcoes de colisao:

			deve-se chamar a funcao de colisao com o objeto que deve-se colidir com outro:
				ex: object obj(5, 5, 10, 10); obj.obj_colid(<&otr_obj>, <flags>);
				colocando como ponteiro do tipo object* o outro objeto a se testar a colisao
				e colocando uma flag referente a forma de colisao


		flags:
			<object::obj_colid>:
				COLID_IN = 0;
					objeto esta dentro de outro;
				COLID_OUT = 1;
					objeto esta fora de outro; se a velocidade do objeto for maior que o tamanho do colisor, o objeto "pulara" ele;
				COLID_UP_FINE = 2;
					NUNCA atravessa para baixo
				COLID_DOWN_FINE = 3;
					NUNCA atravessa para cima
				COLID_LEFT_FINE = 4;
					NUNCA atravessa para direta
				COLID_RIGHT_FINE = 5;
					NUNCA atravessa para esquerda


		funcoes:

			object::object(sint position_x, sint position_y, usint width, usint height)
				construtor padrao:
					posicao inicial no eixo x;
					posicao inicial no eixo y;
					largura do objeto;
					altura do objeto;

			int object::obj_mov(sint velocity)
				funcao de movimento do personagem:
					velocidade do personagem;

			bool object::obj_colid(object* otr_obj, usint obj_in_out)
				colisor para o objeto chamador que atua no mesmo:
					o outro objeto que se deseja a colisao;
					flags;
						retona true caso aja uma colisao e false caso contrario

			bool object::obj_colid_invert(object* otr_obj, usint obj_in_out)
				colisor que atua no objeto de insercao por ponteiro nao no objeto chamador
				o outro objeto que se deseja a colisao;
				flags;
					retona true caso aja uma colisao e false caso contrario

			sint object::get_x(void) { return obj_pos_x; }
					retorna a posicao x;
				
			sint object::get_y(void) { return obj_pos_y; }
					retorna a posicao y;

			sint object::get_w(void) { return obj_w; }
					retorna a largura;

			sint object::get_h(void) { return obj_h; }
					retorna a altura;

			void object::set_w(bool state) { obj_click_w = state; }
				define um estado de <true == ativo> ou <false == inativo> para o w:
					valor true ou false;

			void object::set_s(bool state) { obj_click_s = state; }
				define um estado de <true == ativo> ou <false == inativo> para o s:
					valor true ou false;

			void object::set_a(bool state) { obj_click_a = state; }
				define um estado de <true == ativo> ou <false == inativo> para o a:
					valor true ou false;

			void object::set_d(bool state) { obj_click_d = state; }
				define um estado de <true == ativo> ou <false == inativo> para o d:
					valor true ou false;

			usint object::get_number() { return obj_number; }
					retorna o numero do objeto, o numero do objeto e definido na ordem de criacao dos objetos;